
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 07 12:23:42 CST 2014
//----------------------------------------------------

package AnalizadorEscenario;

import java_cup.runtime.*;
import Clases.*;
import Almacenamiento.*;
import java.util.ArrayList;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 07 12:23:42 CST 2014
  */
public class SintacticoEscenario extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoEscenario() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoEscenario(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\003\003\000\002\007" +
    "\002\000\002\004\005\000\002\004\003\000\002\010\002" +
    "\000\002\004\006\000\002\005\012\000\002\006\003\000" +
    "\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\006\003\005\014\006\001\002\000\010\002" +
    "\ufffd\003\uffff\014\uffff\001\002\000\004\006\024\001\002" +
    "\000\004\005\012\001\002\000\004\002\011\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\011\013\001\002\000\004\004\014\001\002\000\010\007" +
    "\022\010\ufff9\012\ufff9\001\002\000\004\010\016\001\002" +
    "\000\004\004\014\001\002\000\004\012\020\001\002\000" +
    "\004\006\021\001\002\000\010\002\ufffa\003\ufffa\014\ufffa" +
    "\001\002\000\004\004\023\001\002\000\006\010\ufff8\012" +
    "\ufff8\001\002\000\006\003\ufffc\014\ufffc\001\002\000\006" +
    "\003\005\014\006\001\002\000\004\002\ufffb\001\002\000" +
    "\006\003\005\014\006\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\010\003\006\004\007\005\003\001\001\000" +
    "\004\007\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\024\001\001\000\006\004" +
    "\025\005\003\001\001\000\002\001\001\000\006\004\027" +
    "\005\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoEscenario$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoEscenario$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoEscenario$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Variable primerHeroe = null;
	private ArrayList<PosicionInicial> listaPosicionInicial = new ArrayList<PosicionInicial>();
    private Variable[][] variablesPrincipales = new Variable[16][16];
    private Variable[][] variablesSecundarias = new Variable[16][16];
	private ArrayList<ErrorSintactico> listaErrores = new ArrayList<ErrorSintactico>();
	private ArrayList<Variable> listaVariables = null;
	private ArrayList<Posicionamiento> listaPosicionamiento = new ArrayList<Posicionamiento>();
			
	public void ingresarErrorSintactico(String lexema,int fila,int columna,String descripcion){
		listaErrores.add(new ErrorSintactico(lexema,fila,columna,descripcion));
	}
					
	public ArrayList<ErrorSintactico> getListaErrores(){
		return listaErrores;
	}
	
	public void setListaVariables(ArrayList<Variable> listaVariables){
		this.listaVariables = listaVariables;
	}
	
	public String getTipo(String identificador){
		if(listaVariables!=null){
			for(int i=0;i<listaVariables.size();i++){
				if(listaVariables.get(i).getIdentificador().toLowerCase().equals(identificador.toLowerCase())){
					return listaVariables.get(i).getTipo().toLowerCase();
				}
			}
			return null;
		}
		return null;
	}
	
	public boolean existeVariable(String identificador){
		if(listaVariables!=null){
			for(int i=0;i<listaVariables.size();i++){
				if(listaVariables.get(i).getIdentificador().toLowerCase().equals(identificador.toLowerCase())){
					return true;
				}
			}
			return false;
		}
		return false;
	}
	
	public Variable getVariable(String identificador){
		if(listaVariables!=null){
			for(int i=0;i<listaVariables.size();i++){
				if(listaVariables.get(i).getIdentificador().toLowerCase().equals(identificador.toLowerCase())){
					return listaVariables.get(i);
				}
			}
			return null;
		}
		return null;
	}
	
	public void ingresarPosicionamiento(String identificador, int x, int y){
		listaPosicionamiento.add(new Posicionamiento(identificador,x,y));
	}
	
	public ArrayList<Posicionamiento> getListaPosicionamiento(){
		return listaPosicionamiento;
	}
	
	public Variable[][] getVariablesPrincipales(){
		return variablesPrincipales;
	}
	
	public Variable[][] getVariablesSecundarias(){
		return variablesSecundarias;
	}
	
	public Variable getPrimerHeroe(){
		return primerHeroe;
	}
	
	public void setPrimerHeroe(Variable heroe){
		primerHeroe = heroe;
	}
	
	public ArrayList<PosicionInicial> getListaPosicionInicial(){
		return listaPosicionInicial;
	}
		
    /**Metodo al que se llama automticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
		try{
			System.out.println("Error Sintactico. LÃ­nea: " + s.right + ", Columna: " + s.left + ". Identificador " + s.value + " no reconocido.");
			ingresarErrorSintactico(s.value.toString(),s.right,s.left,"Error Sintactico, archivo Escenario.maze");
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
			System.out.println("Error Sintactico Irrecuperable. Linea: " + s.right+ ", Columna: "+s.left+". Identificador " + s.value + " no reconocido.");
			ingresarErrorSintactico("FIN ARCHIVO",0,0,"Error Sintactico Irrecuperable, Se llego al fin de archivo sin lograr recuperacion, archivo Escenario.maze");
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoEscenario$actions {


	boolean unHeroe = false;
	
	public void muestra(String s){
		System.out.println(s);
	}
	
	private String getTipo(String identificador){
		return parser.getTipo(identificador);
	}
	
	private boolean existeVariable(String identificador){
		return parser.existeVariable(identificador);		
	}
	
	private Variable getVariable(String identificador){
		return parser.getVariable(identificador);
	}
	
	private void ingresarErrorSintactico(String lexema,int fila,int columna,String descripcion){
		parser.ingresarErrorSintactico(lexema,fila,columna,descripcion);
	}
	
	private void ingresarPosicionamiento(String identificador, int x, int y, int fila, int columna){
		if(validarIngresoAMatriz(identificador,x,y,fila,columna)){
			parser.ingresarPosicionamiento(identificador,x,y);
		}
	}
	
	private void setVariablePrincipal(int x, int y, Variable variable){
		Variable[][] principales = parser.getVariablesPrincipales();
		principales[x][y] = variable;
	}
	
	private void setVariableSecundaria(int x, int y, Variable variable){
		Variable[][] secundarias = parser.getVariablesSecundarias();
		secundarias[x][y] = variable;
	}
	
	private Variable getVariablePrincipal(int x, int y){
		Variable[][] primarias = parser.getVariablesPrincipales();
		return primarias[x][y];
	}
	
	private Variable getVariableSecundaria(int x, int y){
		Variable[][] secundarias = parser.getVariablesSecundarias();
		return secundarias[x][y];
	}
	
	private void agregarPosicionInicial(Variable variable,String tipo,int x ,int y, int fila, int columna){
		if(!existeVariablePosicionInicial(variable.getIdentificador())){
			parser.getListaPosicionInicial().add(new PosicionInicial(variable,tipo,x,y));
		}
		else{
			ingresarErrorSintactico(variable.getIdentificador(),fila,columna,"Error Semantico, No puede posicionarse mas de una vez un mismo enemigo en el tablero, archivo Escenario.maze");
		}
	}
	
	private boolean existeVariablePosicionInicial(String identificador){
		ArrayList<PosicionInicial> lista = parser.getListaPosicionInicial();
		for(int i= 0; i < lista.size(); i++){
			if(identificador.equals(lista.get(i).getVariable().getIdentificador())){
				return true;
			}
		}
		return false;
	}

	
	private boolean validarIngresoAMatriz(String identificador, int x, int y, int fila, int columna){
                Variable variable = getVariable(identificador);
				String tipo = getTipo(identificador);
                
				if(getVariablePrincipal(x,y)==null){
					if("heroe".equals(tipo)||"enemigo".equals(tipo)||"obstaculo".equals(tipo)){		
						setVariablePrincipal(x,y,variable);
						if("heroe".equals(tipo)||"enemigo".equals(tipo)){
							agregarPosicionInicial(variable,tipo,x,y,fila,columna);
						}
						return true;
					}
					else{
						ingresarErrorSintactico(identificador,fila,columna,"Error Semantico, No puede agregarse el powerup en posicion("+x+","+y+") porque no hay nada aun, archivo Escenario.maze");
						return false;
					}
				}
				
				else if(getVariablePrincipal(x,y)!=null&&getVariableSecundaria(x,y)==null){
					if("fuego".equals(tipo)||"corazon".equals(tipo)||"bombar".equals(tipo)||"bomba".equals(tipo)){
							Variable primaria = getVariablePrincipal(x,y);
							String tipoPrimaria = getTipo(primaria.getIdentificador());
							String destruible = primaria.getDestruible();
							if(tipoPrimaria.equals("obstaculo")&&destruible.equals("v")){
								setVariableSecundaria(x,y,variable);
								return true;
							}
							else{
								ingresarErrorSintactico(identificador,fila,columna,"Error Semantico, No puede agregarse el powerup en posicion("+x+","+y+") porque no existe obstaculo destructible, Escenario.maze");
								return false;
							}
					}
					else{
						ingresarErrorSintactico(identificador,fila,columna,"Error Semantico, No puede asignarse, en posicion("+x+","+y+") ya existe pieza, archivo Escenario.maze");
						return false;
					}
				}
				
				else{
					ingresarErrorSintactico(identificador,fila,columna,"Error Semantico, La posicion("+x+","+y+") ya esta llena no puede ingresarse, archivo Escenario.maze");
					return false;
				}
    }
	
	
	private void setPrimerHeroe(Variable heroe){
		parser.setPrimerHeroe(heroe);
	}
	
	private boolean poseeImagen(String identificador){
		File archivoAuxiliar = new File(quitarComillas(getVariable(identificador).getRuta()));
        if(!archivoAuxiliar.exists()){
			return false;
        }
		else{
			return true;
		}
	}
	
	private String quitarComillas(String ruta){
        String cadena = ruta.substring(1, ruta.length()-1);
        return cadena;
    }
	

  private final SintacticoEscenario parser;

  /** Constructor */
  CUP$SintacticoEscenario$actions(SintacticoEscenario parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoEscenario$do_action(
    int                        CUP$SintacticoEscenario$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoEscenario$parser,
    java.util.Stack            CUP$SintacticoEscenario$stack,
    int                        CUP$SintacticoEscenario$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoEscenario$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoEscenario$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALOR ::= entero rango entero 
            {
              int[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).value;
			
						if((Integer.parseInt(a.toString())>=1&&Integer.parseInt(a.toString())<=15)&&(Integer.parseInt(b.toString())>=1&&Integer.parseInt(b.toString())<=15)){
							if(Integer.parseInt(a.toString())<=Integer.parseInt(b.toString())){
								int [] arreglo = new int[2];
								arreglo[0] = Integer.parseInt(a.toString());
								arreglo[1] = Integer.parseInt(b.toString());
								RESULT  = arreglo;
							}
							else{
								ingresarErrorSintactico(b.toString(),bright,bleft,"Error Semantico, El segundo numero del rango es menor que el primero, archivo Escenario.maze");
							}
						}
						else{
							if(Integer.parseInt(a.toString())>15||Integer.parseInt(a.toString())<1){
								ingresarErrorSintactico(a.toString(),aright,aleft,"Error Semantico, Numero fuera de rango del tablero, archivo Escenario.maze");
							}
							if(Integer.parseInt(b.toString())>15||Integer.parseInt(b.toString())<1){
								ingresarErrorSintactico(b.toString(),bright,bleft,"Error Semantico, Numero fuera de rango del tablero, archivo Escenario.maze");
							}
							RESULT = null;
						}
					
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(4/*VALOR*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VALOR ::= entero 
            {
              int[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).value;
		  
						if(Integer.parseInt(a.toString())>15||Integer.parseInt(a.toString())<1){
							ingresarErrorSintactico(a.toString(),aright,aleft,"Error Semantico, Numero fuera de rango del tablero, archivo Escenario.maze");
							RESULT = null;
						}
						else{
							int [] arreglo = new int[2];
							arreglo[0] = Integer.parseInt(a.toString());
							arreglo[1] = Integer.parseInt(a.toString());
							RESULT  = arreglo;
						}
					
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(4/*VALOR*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // POSICIONAMIENTO ::= identificador asignacion parentesisAbre VALOR coma VALOR parentesisCierre puntoComa 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-7)).value;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-4)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-4)).right;
		int[] val1 = (int[])((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-4)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).right;
		int[] val2 = (int[])((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).value;
			
								if(!existeVariable(id)){ 
									ingresarErrorSintactico(id,idright,idleft,"Error Semantico, Variable no existe en recursos, archivo Escenario.maze"); 
								}
								else{
									if(getTipo(id).equals("heroe")){ 
										if(unHeroe==false){
											unHeroe = true;
											setPrimerHeroe(getVariable(id.toString()));
										}
										else{
											ingresarErrorSintactico(id,idright,idleft,"Error Semantico, Variable del tipo heroe ya vino una vez, archivo Escenario.maze"); 
										}
									}
									if(val1!=null&&val2!=null){
										for(int i = val1[0]; i<=val1[1];i++){
											for(int j = val2[0]; j<=val2[1];j++){
												if(poseeImagen(id)){
													ingresarPosicionamiento(id,i,j,idright,idleft);
												}
												else{
													ingresarErrorSintactico(id,idright,idleft,"Error Sistema, No se encontro Imagen, archivo Escenario.maze"); 
												}
											}
										}
									}
								}								
							
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(3/*POSICIONAMIENTO*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-7)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= error puntoComa NT$1 CUERPO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).value;

              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT = null;
muestra("---------------------------------BLOQUE CON ERRORES SINTACTICOS--------------------------------");
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(6/*NT$1*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= POSICIONAMIENTO 
            {
              Object RESULT = null;
		 muestra("FIN DE ASIGNACION---------------------------------");
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= POSICIONAMIENTO NT$0 CUERPO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).value;

              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-2)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT = null;
 muestra("FIN DE ASIGNACION---------------------------------");
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(5/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT = null;

              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          return CUP$SintacticoEscenario$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoEscenario$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoEscenario$stack.elementAt(CUP$SintacticoEscenario$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoEscenario$parser.done_parsing();
          return CUP$SintacticoEscenario$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

