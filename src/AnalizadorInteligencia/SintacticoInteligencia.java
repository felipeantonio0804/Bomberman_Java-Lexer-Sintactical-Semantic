
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 07 17:51:23 CST 2014
//----------------------------------------------------

package AnalizadorInteligencia;

import java_cup.runtime.*;
import Clases.*;
import Almacenamiento.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Tue Jan 07 17:51:23 CST 2014
  */
public class SintacticoInteligencia extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoInteligencia() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoInteligencia(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\003\003\000\002\020" +
    "\002\000\002\003\006\000\002\004\004\000\002\004\003" +
    "\000\002\021\002\000\002\017\013\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\011\000\002\007" +
    "\003\000\002\007\002\000\002\012\012\000\002\012\011" +
    "\000\002\010\003\000\002\010\002\000\002\013\007\000" +
    "\002\013\004\000\002\013\007\000\002\005\006\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\014\006\000\002\014\007\000\002\014\003" +
    "\000\002\015\012\000\002\015\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\003\004\020\006\001\002\000\004\026" +
    "\125\001\002\000\006\002\ufffc\020\ufffc\001\002\000\004" +
    "\022\013\001\002\000\004\002\012\001\002\000\006\002" +
    "\000\020\006\001\002\000\006\002\ufffd\020\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\023\014\001\002\000" +
    "\004\021\015\001\002\000\004\024\016\001\002\000\004" +
    "\025\017\001\002\000\014\004\030\005\022\013\027\014" +
    "\023\017\024\001\002\000\016\004\ufff6\005\ufff6\013\ufff6" +
    "\014\ufff6\017\ufff6\026\ufff6\001\002\000\016\004\ufff4\005" +
    "\ufff4\013\ufff4\014\ufff4\017\ufff4\026\ufff4\001\002\000\004" +
    "\023\121\001\002\000\004\023\062\001\002\000\004\023" +
    "\043\001\002\000\016\004\ufff5\005\ufff5\013\ufff5\014\ufff5" +
    "\017\ufff5\026\ufff5\001\002\000\016\004\030\005\022\013" +
    "\027\014\023\017\024\026\ufffb\001\002\000\004\023\032" +
    "\001\002\000\004\027\031\001\002\000\016\004\uffeb\005" +
    "\uffeb\013\uffeb\014\uffeb\017\uffeb\026\uffeb\001\002\000\004" +
    "\021\033\001\002\000\004\024\034\001\002\000\004\027" +
    "\035\001\002\000\016\004\uffea\005\uffea\013\uffea\014\uffea" +
    "\017\uffea\026\uffea\001\002\000\016\004\ufff9\005\ufff9\013" +
    "\ufff9\014\ufff9\017\ufff9\026\ufff9\001\002\000\016\004\ufff7" +
    "\005\ufff7\013\ufff7\014\ufff7\017\ufff7\026\ufff7\001\002\000" +
    "\004\026\042\001\002\000\016\004\ufff8\005\ufff8\013\ufff8" +
    "\014\ufff8\017\ufff8\026\ufff8\001\002\000\006\002\ufffa\020" +
    "\ufffa\001\002\000\004\012\045\001\002\000\004\024\055" +
    "\001\002\000\004\023\046\001\002\000\012\006\052\007" +
    "\053\010\051\011\050\001\002\000\004\024\054\001\002" +
    "\000\004\024\uffe5\001\002\000\004\024\uffe6\001\002\000" +
    "\004\024\uffe8\001\002\000\004\024\uffe7\001\002\000\004" +
    "\024\uffe9\001\002\000\004\025\056\001\002\000\016\004" +
    "\030\005\022\013\027\014\023\017\024\026\ufff1\001\002" +
    "\000\004\026\061\001\002\000\016\004\030\005\022\013" +
    "\027\014\023\017\024\026\ufff2\001\002\000\016\004\ufff3" +
    "\005\ufff3\013\ufff3\014\ufff3\017\ufff3\026\ufff3\001\002\000" +
    "\004\012\045\001\002\000\004\024\064\001\002\000\004" +
    "\025\065\001\002\000\016\004\030\005\022\013\027\014" +
    "\023\017\024\026\uffed\001\002\000\004\026\070\001\002" +
    "\000\016\004\030\005\022\013\027\014\023\017\024\026" +
    "\uffee\001\002\000\022\004\uffef\005\uffef\013\uffef\014\uffef" +
    "\015\074\016\073\017\uffef\026\uffef\001\002\000\016\004" +
    "\ufff0\005\ufff0\013\ufff0\014\ufff0\017\ufff0\026\ufff0\001\002" +
    "\000\022\004\uffe2\005\uffe2\013\uffe2\014\uffe2\015\107\016" +
    "\106\017\uffe2\026\uffe2\001\002\000\004\025\103\001\002" +
    "\000\004\023\075\001\002\000\004\012\045\001\002\000" +
    "\004\024\077\001\002\000\004\025\100\001\002\000\016" +
    "\004\030\005\022\013\027\014\023\017\024\026\uffed\001" +
    "\002\000\004\026\102\001\002\000\022\004\uffe0\005\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\026\uffe0\001" +
    "\002\000\016\004\030\005\022\013\027\014\023\017\024" +
    "\026\uffed\001\002\000\004\026\105\001\002\000\016\004" +
    "\uffe4\005\uffe4\013\uffe4\014\uffe4\017\uffe4\026\uffe4\001\002" +
    "\000\004\025\116\001\002\000\004\023\110\001\002\000" +
    "\004\012\045\001\002\000\004\024\112\001\002\000\004" +
    "\025\113\001\002\000\016\004\030\005\022\013\027\014" +
    "\023\017\024\026\uffed\001\002\000\004\026\115\001\002" +
    "\000\022\004\uffe1\005\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\026\uffe1\001\002\000\016\004\030\005\022" +
    "\013\027\014\023\017\024\026\uffed\001\002\000\004\026" +
    "\120\001\002\000\016\004\uffe3\005\uffe3\013\uffe3\014\uffe3" +
    "\017\uffe3\026\uffe3\001\002\000\012\006\052\007\053\010" +
    "\051\011\050\001\002\000\004\024\123\001\002\000\004" +
    "\027\124\001\002\000\016\004\uffec\005\uffec\013\uffec\014" +
    "\uffec\017\uffec\026\uffec\001\002\000\004\020\uffff\001\002" +
    "\000\004\020\006\001\002\000\006\002\ufffe\020\006\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\010\003\006\004\007\017\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\025\011\017\012" +
    "\024\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\035\012\040\013\036\021\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\057\007\056" +
    "\011\017\012\024\013\020\001\001\000\002\001\001\000" +
    "\010\011\035\012\040\013\036\001\001\000\002\001\001" +
    "\000\004\005\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\066\010\065\011\017\012\024\013\020" +
    "\001\001\000\002\001\001\000\010\011\035\012\040\013" +
    "\036\001\001\000\006\014\070\015\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\066\010\100\011\017\012\024\013" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\066\010\103\011\017\012\024\013\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\066\010\113\011\017\012\024" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\066\010\116\011\017\012\024\013\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\125\001\001\000\006\004\126\017\004\001" +
    "\001\000\004\017\010\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoInteligencia$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoInteligencia$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoInteligencia$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public ListaMetodos listaMetodosNodo = new ListaMetodos();
	
	private ArrayList<ErrorSintactico> listaErrores = new ArrayList<ErrorSintactico>();
	private ArrayList<Metodo> listaMetodos = new ArrayList<Metodo>();
			
	public void ingresarErrorSintactico(String lexema,int fila,int columna,String descripcion){
		listaErrores.add(new ErrorSintactico(lexema,fila,columna,descripcion));
	}
					
	public ArrayList<ErrorSintactico> getListaErrores(){
		return listaErrores;
	}
	
	public ArrayList<Metodo> getListaMetodos(){
		return listaMetodos;
	}
	
	public void agregarMetodo(String identificador, String retardo, int fila, int columna){
		if(!existeMetodo(identificador)){
			listaMetodos.add(new Metodo(identificador, retardo));
		}
		else{
			ingresarErrorSintactico(identificador,fila,columna,"Error Semantico, Metodo ya existente con igual identificador, archivo Inteligencia.ia");
		}
	}
	
	private boolean existeMetodo(String identificador){
		for(int i=0;i<listaMetodos.size();i++){
			if(listaMetodos.get(i).getIdentificador().toLowerCase().equals(identificador.toLowerCase())){
				return true;
			}
		}
		return false;
	}
	
		
    /**Metodo al que se llama automticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
		try{
			System.out.println("Error Sintactico. Línea: " + s.right + ", Columna: " + s.left + ". Identificador " + s.value + " no reconocido.");
			ingresarErrorSintactico(s.value.toString(),s.right,s.left,"Error Sintactico, archivo Inteligencia.ia");
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		try{
			System.out.println("Error Sintactico Irrecuperable. Linea: " + s.right+ ", Columna: "+s.left+". Identificador " + s.value + " no reconocido.");
			ingresarErrorSintactico("FIN ARCHIVO",0,0,"Error Sintactico Irrecuperable, Se llego al fin de archivo sin lograr recuperacion, archivo Inteligencia.ia");
		}
		catch(Exception e){
			System.out.println(e);
		}
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoInteligencia$actions {


	public void muestra(String s){
		System.out.println(s);
	}
	
	private void agregarMetodo(String identificador, String retardo, int fila, int columna){
		parser.agregarMetodo(identificador,retardo,fila,columna);		
	}
	
	private void ingresarErrorSintactico(String lexema,int fila,int columna,String descripcion){
		parser.ingresarErrorSintactico(lexema,fila,columna,descripcion);
	}
	
	private void ingresarMetodoLista(Nodo metodo){
		String id = metodo.valor;
		if(parser.listaMetodosNodo.buscar(id.toLowerCase())==null){
			parser.listaMetodosNodo.agregar(id.toLowerCase(),metodo);
		}
	}

  private final SintacticoInteligencia parser;

  /** Constructor */
  CUP$SintacticoInteligencia$actions(SintacticoInteligencia parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoInteligencia$do_action(
    int                        CUP$SintacticoInteligencia$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoInteligencia$parser,
    java.util.Stack            CUP$SintacticoInteligencia$stack,
    int                        CUP$SintacticoInteligencia$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoInteligencia$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoInteligencia$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSEIF ::= elseif parentesisAbre CONDICION parentesisCierre llavesAbre INSTRUCCIONESIF llavesCierre 
            {
              Nodo RESULT = null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = new Nodo("OPCIONES");
						Nodo hijo = new Nodo("ELSE IF");
						padre.hijos.add(hijo);
						hijo.hijos.add(condicion);
						hijo.hijos.add(instrucciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(11/*ELSEIF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-6)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSEIF ::= ELSEIF elseif parentesisAbre CONDICION parentesisCierre llavesAbre INSTRUCCIONESIF llavesCierre 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = ins;
						Nodo hijo = new Nodo("ELSE IF");
						padre.hijos.add(hijo);
						hijo.hijos.add(condicion);
						hijo.hijos.add(instrucciones);
						RESULT = padre;
						
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(11/*ELSEIF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELSE ::= ELSEIF 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
						RESULT = ins;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(10/*ELSE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELSE ::= ELSEIF tokenelse llavesAbre INSTRUCCIONESIF llavesCierre 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = ins;
						Nodo hijo = new Nodo("ELSE");
						padre.hijos.add(hijo);
						hijo.hijos.add(instrucciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(10/*ELSE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELSE ::= tokenelse llavesAbre INSTRUCCIONESIF llavesCierre 
            {
              Nodo RESULT = null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = new Nodo("OPCIONES");
						Nodo hijo = new Nodo("ELSE");
						padre.hijos.add(hijo);
						hijo.hijos.add(instrucciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(10/*ELSE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIRECCION ::= masy 
            {
              Nodo RESULT = null;
		
							RESULT = new Nodo("+Y");
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(12/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIRECCION ::= menosy 
            {
              Nodo RESULT = null;
		
							RESULT = new Nodo("-Y");
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(12/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DIRECCION ::= masx 
            {
              Nodo RESULT = null;
		
							RESULT = new Nodo("+X");
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(12/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DIRECCION ::= menosx 
            {
              Nodo RESULT = null;
		
							RESULT = new Nodo("-X");
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(12/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICION ::= verificar parentesisAbre DIRECCION parentesisCierre 
            {
              Nodo RESULT = null;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo direccion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
							Nodo padre = new Nodo("CONDICION");
							padre.hijos.add(direccion);
							RESULT = padre;
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(3/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPCIONES ::= espera parentesisAbre decimal parentesisCierre puntoComa 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).value;
		
							Nodo padre = new Nodo("ESPERA");
							padre.hijos.add(new Nodo(d.toString()));
							RESULT = padre;
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(9/*OPCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPCIONES ::= bomba puntoComa 
            {
              Nodo RESULT = null;
		
							RESULT = new Nodo("BOMBA");
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(9/*OPCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPCIONES ::= move parentesisAbre DIRECCION parentesisCierre puntoComa 
            {
              Nodo RESULT = null;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).right;
		Nodo direccion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).value;
		
							Nodo padre = new Nodo("MOVE");
							padre.hijos.add(direccion);
							RESULT = padre;
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(9/*OPCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONESIF ::= 
            {
              Nodo RESULT = null;

              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(6/*INSTRUCCIONESIF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONESIF ::= INSTRUCCIONES 
            {
              Nodo RESULT = null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								RESULT = instrucciones;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(6/*INSTRUCCIONESIF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IF ::= tokenif parentesisAbre CONDICION parentesisCierre llavesAbre INSTRUCCIONESIF llavesCierre 
            {
              Nodo RESULT = null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = new Nodo("IF");
						padre.hijos.add(condicion);
						padre.hijos.add(instrucciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-6)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF ::= tokenif parentesisAbre CONDICION parentesisCierre llavesAbre INSTRUCCIONESIF llavesCierre ELSE 
            {
              Nodo RESULT = null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).value;
		int opcionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int opcionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo opciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
						Nodo padre = new Nodo("IF");
						padre.hijos.add(condicion);
						padre.hijos.add(instrucciones);
						padre.hijos.add(opciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONESWHILE ::= 
            {
              Nodo RESULT = null;

              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(5/*INSTRUCCIONESWHILE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONESWHILE ::= INSTRUCCIONES 
            {
              Nodo RESULT = null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
									RESULT = instrucciones;
								
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(5/*INSTRUCCIONESWHILE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // WHILE ::= tokenwhile parentesisAbre CONDICION parentesisCierre llavesAbre INSTRUCCIONESWHILE llavesCierre 
            {
              Nodo RESULT = null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		
						Nodo padre = new Nodo("WHILE");
						padre.hijos.add(condicion);
						padre.hijos.add(instrucciones);
						RESULT = padre;
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(7/*WHILE*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-6)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= OPCIONES 
            {
              Nodo RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = new Nodo("CUERPO");
								padre.hijos.add(o);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= IF 
            {
              Nodo RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = new Nodo("CUERPO");
								padre.hijos.add(i);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= WHILE 
            {
              Nodo RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = new Nodo("CUERPO");
								padre.hijos.add(w);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES OPCIONES 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = ins;
								padre.hijos.add(o);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= INSTRUCCIONES IF 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = ins;
								padre.hijos.add(i);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES WHILE 
            {
              Nodo RESULT = null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo w = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
								Nodo padre = ins;
								padre.hijos.add(w);
								RESULT = padre;
							
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(4/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= def identificador parentesisAbre decimal parentesisCierre llavesAbre INSTRUCCIONES NT$1 llavesCierre 
            {
              Nodo RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value != null )
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-2)).value;

              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(13/*METODO*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-8)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;

							agregarMetodo(a.toString(),b.toString(),aright,aleft);
							
							Nodo padre = new Nodo(a.toString());
							padre.hijos.add(new Nodo(b.toString()));
							padre.hijos.add(instrucciones);
							RESULT = padre;
						
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(15/*NT$1*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= METODO 
            {
              Object RESULT = null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
						muestra("FIN DE METODO---------------------");
						ingresarMetodoLista(metodo);
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CUERPO METODO 
            {
              Object RESULT = null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).value;
		
						muestra("FIN DE METODO----------------------");
						ingresarMetodoLista(metodo);
					
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error llavesCierre NT$0 CUERPO 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;

              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-3)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT = null;
muestra("---------------------BLOQUE CON ERRORES SINTACTICOS---------------------");
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(14/*NT$0*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT = null;

              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          return CUP$SintacticoInteligencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoInteligencia$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-1)).left, ((java_cup.runtime.Symbol)CUP$SintacticoInteligencia$stack.elementAt(CUP$SintacticoInteligencia$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoInteligencia$parser.done_parsing();
          return CUP$SintacticoInteligencia$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

